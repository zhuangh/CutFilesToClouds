// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "KeyValueStore.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::KeyValueStore;

class KeyValueStoreHandler : virtual public KeyValueStoreIf {
 public:
  KeyValueStoreHandler() {
    // Your initialization goes here
  }

  void Get(GetResponse& _return, const std::string& key) {
    // Your implementation goes here
    printf("Get\n");
  }

  void GetList(GetListResponse& _return, const std::string& key) {
    // Your implementation goes here
    printf("GetList\n");
  }

  KVStoreStatus::type Put(const std::string& key, const std::string& value, const std::string& clientid) {
    // Your implementation goes here
    printf("Put\n");
  }

  KVStoreStatus::type AddToList(const std::string& key, const std::string& value, const std::string& clientid) {
    // Your implementation goes here
    printf("AddToList\n");
  }

  KVStoreStatus::type RemoveFromList(const std::string& key, const std::string& value, const std::string& clientid) {
    // Your implementation goes here
    printf("RemoveFromList\n");
  }

  void KVPut(const std::string& key, const std::string& value, const std::string& clientid) {
    // Your implementation goes here
    printf("KVPut\n");
  }

  void KVAddToList(const std::string& key, const std::string& value, const std::string& clientid) {
    // Your implementation goes here
    printf("KVAddToList\n");
  }

  void KVRemoveFromList(const std::string& key, const std::string& value, const std::string& clientid) {
    // Your implementation goes here
    printf("KVRemoveFromList\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<KeyValueStoreHandler> handler(new KeyValueStoreHandler());
  shared_ptr<TProcessor> processor(new KeyValueStoreProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

