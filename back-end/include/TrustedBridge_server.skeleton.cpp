// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TrustedBridge.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::TrustedBridge;

class TrustedBridgeHandler : virtual public TrustedBridgeIf {
 public:
  TrustedBridgeHandler() {
    // Your initialization goes here
  }

  TBStatus::type AddUser(const std::string& username) {
    // Your implementation goes here
    printf("AddUser\n");
  }

  void GetFileList(GetListResponse& _return, const std::string& username) {
    // Your implementation goes here
    printf("GetFileList\n");
  }

  TBStatus::type Remove(const std::string& username, const std::string& filename) {
    // Your implementation goes here
    printf("Remove\n");
  }

  void DownloadFromExt(DownloadResponse& _return, const std::string& username, const std::string& filename) {
    // Your implementation goes here
    printf("DownloadFromExt\n");
  }

  void DownloadFromServer(DownloadResponse& _return, const std::string& username, const std::string& filename) {
    // Your implementation goes here
    printf("DownloadFromServer\n");
  }

  TBStatus::type UploadToExt(const std::string& username, const std::string& filename, const std::string& file) {
    // Your implementation goes here
    printf("UploadToExt\n");
  }

  TBStatus::type UploadToServer(const std::string& username, const std::string& filename, const std::string& file) {
    // Your implementation goes here
    printf("UploadToServer\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<TrustedBridgeHandler> handler(new TrustedBridgeHandler());
  shared_ptr<TProcessor> processor(new TrustedBridgeProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

